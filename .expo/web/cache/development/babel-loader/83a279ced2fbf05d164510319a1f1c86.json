{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Formik, useField } from 'formik';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar initialValues = {\n  mass: '',\n  height: ''\n};\nvar getBodyMassIndex = function getBodyMassIndex(mass, height) {\n  return Math.round(mass / Math.pow(height, 2));\n};\nvar BodyMassIndexForm = function BodyMassIndexForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  var _useField = useField('mass'),\n    _useField2 = _slicedToArray(_useField, 3),\n    massField = _useField2[0],\n    massMeta = _useField2[1],\n    massHelpers = _useField2[2];\n  var _useField3 = useField('height'),\n    _useField4 = _slicedToArray(_useField3, 3),\n    heightField = _useField4[0],\n    heightMeta = _useField4[1],\n    heightHelpers = _useField4[2];\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      placeholder: \"Weight (kg)\",\n      value: massField.value,\n      onChangeText: function onChangeText(text) {\n        return massHelpers.setValue(text);\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Height (m)\",\n      value: heightField.value,\n      onChangeText: function onChangeText(text) {\n        return heightHelpers.setValue(text);\n      }\n    }), _jsx(Pressable, {\n      onPress: onSubmit,\n      children: _jsx(Text, {\n        children: \"Calculate\"\n      })\n    })]\n  });\n};\nvar BodyMassIndexCalculator = function BodyMassIndexCalculator() {\n  var onSubmit = function onSubmit(values) {\n    var mass = parseFloat(values.mass);\n    var height = parseFloat(values.height);\n    if (!isNaN(mass) && !isNaN(height) && height !== 0) {\n      console.log(\"Your body mass index is: \" + getBodyMassIndex(mass, height));\n    }\n  };\n  return _jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    children: function children(_ref2) {\n      var handleSubmit = _ref2.handleSubmit;\n      return _jsx(BodyMassIndexForm, {\n        onSubmit: handleSubmit\n      });\n    }\n  });\n};","map":{"version":3,"names":["Formik","useField","initialValues","mass","height","getBodyMassIndex","Math","round","pow","BodyMassIndexForm","onSubmit","massField","massMeta","massHelpers","heightField","heightMeta","heightHelpers","value","text","setValue","BodyMassIndexCalculator","values","parseFloat","isNaN","console","log","handleSubmit"],"sources":["D:/Ohjelmointi/Full Stack Open/Exercises/Part 10/rate-repository-app/src/components/BMICalculator.jsx"],"sourcesContent":["import { Text, TextInput, Pressable, View } from 'react-native';\nimport { Formik, useField } from 'formik';\n\nconst initialValues = {\n  mass: '',\n  height: '',\n};\n\nconst getBodyMassIndex = (mass, height) => {\n  return Math.round(mass / Math.pow(height, 2));\n};\n\nconst BodyMassIndexForm = ({ onSubmit }) => {\n  const [massField, massMeta, massHelpers] = useField('mass');\n  const [heightField, heightMeta, heightHelpers] = useField('height');\n\n  return (\n    <View>\n      <TextInput\n        placeholder=\"Weight (kg)\"\n        value={massField.value}\n        onChangeText={text => massHelpers.setValue(text)}\n      />\n      <TextInput\n        placeholder=\"Height (m)\"\n        value={heightField.value}\n        onChangeText={text => heightHelpers.setValue(text)}\n      />\n      <Pressable onPress={onSubmit}>\n        <Text>Calculate</Text>\n      </Pressable>\n    </View>\n  );\n};\n\nconst BodyMassIndexCalculator = () => {\n  const onSubmit = values => {\n    const mass = parseFloat(values.mass);\n    const height = parseFloat(values.height);\n\n    if (!isNaN(mass) && !isNaN(height) && height !== 0) {\n      console.log(`Your body mass index is: ${getBodyMassIndex(mass, height)}`);\n    }\n  };\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\n      {({ handleSubmit }) => <BodyMassIndexForm onSubmit={handleSubmit} />}\n    </Formik>\n  );\n};"],"mappings":";;;;;AACA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,QAAQ;AAAC;AAAA;AAE1C,IAAMC,aAAa,GAAG;EACpBC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE;AACV,CAAC;AAED,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIF,IAAI,EAAEC,MAAM,EAAK;EACzC,OAAOE,IAAI,CAACC,KAAK,CAACJ,IAAI,GAAGG,IAAI,CAACE,GAAG,CAACJ,MAAM,EAAE,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED,IAAMK,iBAAiB,GAAG,SAApBA,iBAAiB,OAAqB;EAAA,IAAfC,QAAQ,QAARA,QAAQ;EACnC,gBAA2CT,QAAQ,CAAC,MAAM,CAAC;IAAA;IAApDU,SAAS;IAAEC,QAAQ;IAAEC,WAAW;EACvC,iBAAiDZ,QAAQ,CAAC,QAAQ,CAAC;IAAA;IAA5Da,WAAW;IAAEC,UAAU;IAAEC,aAAa;EAE7C,OACE,MAAC,IAAI;IAAA,WACH,KAAC,SAAS;MACR,WAAW,EAAC,aAAa;MACzB,KAAK,EAAEL,SAAS,CAACM,KAAM;MACvB,YAAY,EAAE,sBAAAC,IAAI;QAAA,OAAIL,WAAW,CAACM,QAAQ,CAACD,IAAI,CAAC;MAAA;IAAC,EACjD,EACF,KAAC,SAAS;MACR,WAAW,EAAC,YAAY;MACxB,KAAK,EAAEJ,WAAW,CAACG,KAAM;MACzB,YAAY,EAAE,sBAAAC,IAAI;QAAA,OAAIF,aAAa,CAACG,QAAQ,CAACD,IAAI,CAAC;MAAA;IAAC,EACnD,EACF,KAAC,SAAS;MAAC,OAAO,EAAER,QAAS;MAAA,UAC3B,KAAC,IAAI;QAAA,UAAC;MAAS;IAAO,EACZ;EAAA,EACP;AAEX,CAAC;AAED,IAAMU,uBAAuB,GAAG,SAA1BA,uBAAuB,GAAS;EACpC,IAAMV,QAAQ,GAAG,SAAXA,QAAQ,CAAGW,MAAM,EAAI;IACzB,IAAMlB,IAAI,GAAGmB,UAAU,CAACD,MAAM,CAAClB,IAAI,CAAC;IACpC,IAAMC,MAAM,GAAGkB,UAAU,CAACD,MAAM,CAACjB,MAAM,CAAC;IAExC,IAAI,CAACmB,KAAK,CAACpB,IAAI,CAAC,IAAI,CAACoB,KAAK,CAACnB,MAAM,CAAC,IAAIA,MAAM,KAAK,CAAC,EAAE;MAClDoB,OAAO,CAACC,GAAG,+BAA6BpB,gBAAgB,CAACF,IAAI,EAAEC,MAAM,CAAC,CAAG;IAC3E;EACF,CAAC;EAED,OACE,KAAC,MAAM;IAAC,aAAa,EAAEF,aAAc;IAAC,QAAQ,EAAEQ,QAAS;IAAA,UACtD;MAAA,IAAGgB,YAAY,SAAZA,YAAY;MAAA,OAAO,KAAC,iBAAiB;QAAC,QAAQ,EAAEA;MAAa,EAAG;IAAA;EAAA,EAC7D;AAEb,CAAC"},"metadata":{},"sourceType":"module"}