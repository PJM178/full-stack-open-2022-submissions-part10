{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"name\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useField } from 'formik';\nimport TextInput from \"./TextInput\";\nimport Text from \"./Text\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  errorText: {\n    marginTop: 5\n  }\n});\nvar FormikTextInput = function FormikTextInput(_ref) {\n  var name = _ref.name,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useField = useField(name),\n    _useField2 = _slicedToArray(_useField, 3),\n    field = _useField2[0],\n    meta = _useField2[1],\n    helpers = _useField2[2];\n  var showError = meta.touched && meta.error;\n  if (name === 'password') {\n    return _jsxs(_Fragment, {\n      children: [_jsx(TextInput, _objectSpread({\n        onChangeText: function onChangeText(value) {\n          return helpers.setValue(value);\n        },\n        onBlur: function onBlur() {\n          return helpers.setTouched(true);\n        },\n        value: field.value,\n        error: showError,\n        secureTextEntry: true\n      }, props)), showError && _jsx(Text, {\n        style: styles.errorText,\n        children: meta.error\n      })]\n    });\n  }\n  return _jsxs(_Fragment, {\n    children: [_jsx(TextInput, _objectSpread({\n      onChangeText: function onChangeText(value) {\n        return helpers.setValue(value);\n      },\n      onBlur: function onBlur() {\n        return helpers.setTouched(true);\n      },\n      value: field.value,\n      error: showError,\n      secureTextEntry: true\n    }, props)), showError && _jsx(Text, {\n      style: styles.errorText,\n      children: meta.error\n    })]\n  });\n};\nexport default FormikTextInput;","map":{"version":3,"names":["useField","TextInput","Text","styles","StyleSheet","create","errorText","marginTop","FormikTextInput","name","props","field","meta","helpers","showError","touched","error","value","setValue","setTouched"],"sources":["D:/Ohjelmointi/Full Stack Open/Exercises/Part 10/rate-repository-app/src/components/FormikTextInput.jsx"],"sourcesContent":["import { StyleSheet } from 'react-native';\nimport { useField } from 'formik';\n\nimport TextInput from './TextInput';\nimport Text from './Text';\n\nconst styles = StyleSheet.create({\n  errorText: {\n    marginTop: 5,\n  },\n});\n\nconst FormikTextInput = ({ name, ...props }) => {\n  const [field, meta, helpers] = useField(name);\n  const showError = meta.touched && meta.error;\n\n  if (name === 'password') {\n    return (\n      <>\n        <TextInput\n          onChangeText={value => helpers.setValue(value)}\n          onBlur={() => helpers.setTouched(true)}\n          value={field.value}\n          error={showError}\n          secureTextEntry={true}\n          {...props}\n        />\n        {showError && <Text style={styles.errorText}>{meta.error}</Text>}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <TextInput\n        onChangeText={value => helpers.setValue(value)}\n        onBlur={() => helpers.setTouched(true)}\n        value={field.value}\n        error={showError}\n        secureTextEntry={true}\n        {...props}\n      />\n      {showError && <Text style={styles.errorText}>{meta.error}</Text>}\n    </>\n  );\n};\n\nexport default FormikTextInput;"],"mappings":";;;;;;;AACA,SAASA,QAAQ,QAAQ,QAAQ;AAEjC,OAAOC,SAAS;AAChB,OAAOC,IAAI;AAAe;AAAA;AAAA;AAE1B,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC;EAC/BC,SAAS,EAAE;IACTC,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,IAAMC,eAAe,GAAG,SAAlBA,eAAe,OAA2B;EAAA,IAArBC,IAAI,QAAJA,IAAI;IAAKC,KAAK;EACvC,gBAA+BV,QAAQ,CAACS,IAAI,CAAC;IAAA;IAAtCE,KAAK;IAAEC,IAAI;IAAEC,OAAO;EAC3B,IAAMC,SAAS,GAAGF,IAAI,CAACG,OAAO,IAAIH,IAAI,CAACI,KAAK;EAE5C,IAAIP,IAAI,KAAK,UAAU,EAAE;IACvB,OACE;MAAA,WACE,KAAC,SAAS;QACR,YAAY,EAAE,sBAAAQ,KAAK;UAAA,OAAIJ,OAAO,CAACK,QAAQ,CAACD,KAAK,CAAC;QAAA,CAAC;QAC/C,MAAM,EAAE;UAAA,OAAMJ,OAAO,CAACM,UAAU,CAAC,IAAI,CAAC;QAAA,CAAC;QACvC,KAAK,EAAER,KAAK,CAACM,KAAM;QACnB,KAAK,EAAEH,SAAU;QACjB,eAAe,EAAE;MAAK,GAClBJ,KAAK,EACT,EACDI,SAAS,IAAI,KAAC,IAAI;QAAC,KAAK,EAAEX,MAAM,CAACG,SAAU;QAAA,UAAEM,IAAI,CAACI;MAAK,EAAQ;IAAA,EAC/D;EAEP;EAEA,OACE;IAAA,WACE,KAAC,SAAS;MACR,YAAY,EAAE,sBAAAC,KAAK;QAAA,OAAIJ,OAAO,CAACK,QAAQ,CAACD,KAAK,CAAC;MAAA,CAAC;MAC/C,MAAM,EAAE;QAAA,OAAMJ,OAAO,CAACM,UAAU,CAAC,IAAI,CAAC;MAAA,CAAC;MACvC,KAAK,EAAER,KAAK,CAACM,KAAM;MACnB,KAAK,EAAEH,SAAU;MACjB,eAAe,EAAE;IAAK,GAClBJ,KAAK,EACT,EACDI,SAAS,IAAI,KAAC,IAAI;MAAC,KAAK,EAAEX,MAAM,CAACG,SAAU;MAAA,UAAEM,IAAI,CAACI;IAAK,EAAQ;EAAA,EAC/D;AAEP,CAAC;AAED,eAAeR,eAAe"},"metadata":{},"sourceType":"module"}